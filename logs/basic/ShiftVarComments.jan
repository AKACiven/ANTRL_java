{'packageName': '', 'className': 'CommentShifter', 'implements': [], 'extends': 'CymbolBaseListener', 'imports': ['org.antlr.v4.runtime', 'org.antlr.v4.runtime.tree.ParseTreeWalker', 'java.io.FileInputStream', 'java.io.InputStream', 'java.util.List'], 'fields': [{'fieldType': 'BufferedTokenStream', 'fieldDefinition': 'tokens'}, {'fieldType': 'TokenStreamRewriter', 'fieldDefinition': 'rewriter'}], 'methods': [{'returnType': 'void', 'methodName': 'exitVarDecl', 'params': [{'paramType': 'CymbolParser.VarDeclContext', 'paramName': 'ctx'}], 'callMethods': ['30 29 ctx.getStop()', '31 25 semi.getTokenIndex()', '33 23 tokens.getHiddenTokensToRight(i,CymbolLexer.COMMENTS)', '35 39 cmtChannel.get(0)', '37 37 cmt.getText()', '37 47 cmt.getText().substring(2)', '38 48 txt.trim()', '39 29 rewriter.insertBefore(ctx.start,newCmt)', '40 29 rewriter.replace(cmt,"\\n")'], 'methodBody': '{Tokensemi=ctx.getStop();inti=semi.getTokenIndex();List<Token>cmtChannel=tokens.getHiddenTokensToRight(i,CymbolLexer.COMMENTS);if(cmtChannel!=null){Tokencmt=cmtChannel.get(0);if(cmt!=null){Stringtxt=cmt.getText().substring(2);StringnewCmt="/* "+txt.trim()+" */\\n";rewriter.insertBefore(ctx.start,newCmt);rewriter.replace(cmt,"\\n");}}}', 'methodvars': [{'varType': 'Token', 'varDefinition': 'semi'}, {'varType': 'int', 'varDefinition': 'i'}, {'varType': 'List<Token>', 'varDefinition': 'cmtChannel'}, {'varType': 'Token', 'varDefinition': 'cmt'}, {'varType': 'String', 'varDefinition': 'txt'}, {'varType': 'String', 'varDefinition': 'newCmt'}]}, {'returnType': 'void', 'methodName': 'main', 'params': [{'paramType': 'String[]', 'paramName': 'args'}], 'callMethods': ['57 34 parser.file()', '61 15 walker.walk(shifter,tree)', '62 19 System.out.print(shifter.rewriter.getText())', '62 42 shifter.rewriter.getText()'], 'methodBody': 'throws', 'methodvars': [{'varType': 'String', 'varDefinition': 'inputFile'}, {'varType': 'InputStream', 'varDefinition': 'is'}, {'varType': 'ANTLRInputStream', 'varDefinition': 'input'}, {'varType': 'CymbolLexer', 'varDefinition': 'lexer'}, {'varType': 'CommonTokenStream', 'varDefinition': 'tokens'}, {'varType': 'CymbolParser', 'varDefinition': 'parser'}, {'varType': 'RuleContext', 'varDefinition': 'tree'}, {'varType': 'ParseTreeWalker', 'varDefinition': 'walker'}, {'varType': 'CommentShifter', 'varDefinition': 'shifter'}]}]}
