{'packageName': 'org.terasoluna.tourreservation.domain.service.tourinfo', 'className': 'TourInfoServiceImpl', 'implements': ['TourInfoService'], 'extends': '', 'imports': ['java.util.Collections', 'java.util.List', 'javax.inject.Inject', 'org.springframework.data.domain.Page', 'org.springframework.data.domain.PageImpl', 'org.springframework.data.domain.Pageable', 'org.springframework.stereotype.Service', 'org.springframework.transaction.annotation.Transactional', 'org.terasoluna.tourreservation.domain.model.TourInfo', 'org.terasoluna.tourreservation.domain.repository.tourinfo.TourInfoRepository', 'org.terasoluna.tourreservation.domain.repository.tourinfo.TourInfoSearchCriteria'], 'fields': [{'fieldType': 'TourInfoRepository', 'fieldDefinition': 'tourInfoRepository'}], 'methods': [{'returnType': 'Page<TourInfo>', 'methodName': 'searchTour', 'params': [{'paramType': 'TourInfoSearchCriteria', 'paramName': 'criteria'}, {'paramType': 'Pageable', 'paramName': 'pageable'}], 'callMethods': ['28 40 tourInfoRepository.countBySearchCriteria(criteria)', '31 41 tourInfoRepository.findPageBySearchCriteria(criteria,pageable)', '34 34 Collections.emptyList()'], 'methodBody': '{longtotal=tourInfoRepository.countBySearchCriteria(criteria);List<TourInfo>content;if(0<total){content=tourInfoRepository.findPageBySearchCriteria(criteria,pageable);}else{content=Collections.emptyList();}Page<TourInfo>page=newPageImpl<TourInfo>(content,pageable,total);returnpage;}', 'methodvars': [{'varType': 'long', 'varDefinition': 'total'}, {'varType': 'List<TourInfo>', 'varDefinition': 'content'}, {'varType': 'Page<TourInfo>', 'varDefinition': 'page'}]}], 'test': '@Override'}
