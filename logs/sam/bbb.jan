{'packageName': 'myapplication.mylibrary', 'className': 'InstanceOf', 'implements': ['Expandable<Integer>'], 'extends': 'AbstractClass', 'imports': ['java.util.Random', 'java.util', 'java', 'java.lang.System.out', 'screen.ColorName'], 'fields': [{'fieldType': 'String', 'fieldDefinition': 'str'}, {'fieldType': 'String', 'fieldDefinition': 'hello'}, {'fieldType': 'String', 'fieldDefinition': 'description'}], 'methods': [{'returnType': 'void', 'methodName': 'main', 'params': [{'paramType': 'String[]', 'paramName': 'args'}], 'callMethods': ['72 32 (result=System.class).getName()', '87 8 someMethod()', '88 8 someMethod()', '98 10 someMethod()', '99 10 someMethod()'], 'methodBody': '{longcreditCardNumber=1234_5678_9012_3456L;longsocialSecurityNumber=999_99_9999L;floatpi=3.14_15F;longhexBytes=0xFF_EC_DE_5E;longhexWords=0xCAFE_BABE;longmaxLong=0x7fff_ffff_ffff_ffffL;bytenybbles=0b0010_0101;longbytes=0b11010010_01101001_10010100_10010010;longlastReceivedMessageId=0L;doublehexDouble1=0x1.0p0;doublehexDouble2=0x1.956ad0aae33a4p117;intoctal=01234567;longhexUpper=0x1234567890ABCDEFL;longhexLower=0x1234567890abcedfl;intx1=_52;intx2=5_2;intx4=5_______2;intx7=0x5_2;intx9=0_52;intx10=05_2;intx,y,result;result=x+y;result=x-y;result=x*y;result=y/x;result=x%3;result=+x;result=-y;result=++x;result=--y;booleanok=false;booleannot_ok=!ok;(result=System.class).getName();++x;x++;--y;y--;LexerTest.prePost++;LexerTest.prePost--;myapplication.mylibrary.LexerTest.prePost++;myapplication.mylibrary.LexerTest.prePost--;this.prePost++;this.prePost--;super.prePost++;super.prePost--;someMethod()[0]++;someMethod()[0]--;++LexerTest.prePost;--LexerTest.prePost;++myapplication.mylibrary.LexerTest.prePost;--myapplication.mylibrary.LexerTest.prePost;++this.prePost;--this.prePost;++super.prePost;--super.prePost;++someMethod()[0];--someMethod()[0];result=x==y;result=x!=y;result=x>y;result=x>=y;result=x<y;result=x<=y;if((x>8)&&(y>8)){}if((x>10)||(y>10)){}result=(x>10)?x:y;intf=b1?b2:b3?3:4;result=~x;result=x<<1;result=x>>2;result=x>>>3;result=x&4;result=x^5;result=x|6;result=x;result+=x;result-=x;result*=x;result/=x;result%=x;result&=x;result^=x;result|=x;result<<=x;result>>=x;result>>>=x;}', 'methodvars': [{'varType': 'long', 'varDefinition': 'creditCardNumber'}, {'varType': 'long', 'varDefinition': 'socialSecurityNumber'}, {'varType': 'float', 'varDefinition': 'pi'}, {'varType': 'long', 'varDefinition': 'hexBytes'}, {'varType': 'long', 'varDefinition': 'hexWords'}, {'varType': 'long', 'varDefinition': 'maxLong'}, {'varType': 'byte', 'varDefinition': 'nybbles'}, {'varType': 'long', 'varDefinition': 'bytes'}, {'varType': 'long', 'varDefinition': 'lastReceivedMessageId'}, {'varType': 'double', 'varDefinition': 'hexDouble1'}, {'varType': 'double', 'varDefinition': 'hexDouble2'}, {'varType': 'int', 'varDefinition': 'octal'}, {'varType': 'long', 'varDefinition': 'hexUpper'}, {'varType': 'long', 'varDefinition': 'hexLower'}, {'varType': 'int', 'varDefinition': 'x1'}, {'varType': 'int', 'varDefinition': 'x2'}, {'varType': 'int', 'varDefinition': 'x4'}, {'varType': 'int', 'varDefinition': 'x7'}, {'varType': 'int', 'varDefinition': 'x9'}, {'varType': 'int', 'varDefinition': 'x10'}, {'varType': 'int', 'varDefinition': 'x,y,result'}, {'varType': 'boolean', 'varDefinition': 'ok'}, {'varType': 'boolean', 'varDefinition': 'not_ok'}, {'varType': 'int', 'varDefinition': 'f'}]}, {'returnType': 'void', 'methodName': 'methodCalls', 'params': [], 'callMethods': ['146 21 newObject().getClass()', '146 32 newObject().getClass().hashCode()', '147 35 newString[]{"test"}[0].getLength()', '149 45 (strings=newString[]{"test"})[0].charAt(0)', '150 19 strings[0].length()', '152 12 foo.hashCode()', '153 18 Foo.class.hashCode()', '154 39 newHashMap<Object,String>(5).get(null)'], 'methodBody': '{newObject().getClass().hashCode();newString[]{"test"}[0].getLength();String[]strings;(strings=newString[]{"test"})[0].charAt(0);strings[0].length();Foofoo=newFoo().newBar();foo.hashCode();Foo.class.hashCode();newHashMap<Object,String>(5).get(null);}', 'methodvars': [{'varType': 'String[]', 'varDefinition': 'strings'}, {'varType': 'Foo', 'varDefinition': 'foo'}]}, {'returnType': 'void', 'methodName': 'main', 'params': [{'paramType': 'String[]', 'paramName': 'args'}], 'callMethods': [], 'methodBody': '{Randomrandom=newRandom();}', 'methodvars': [{'varType': 'Random', 'varDefinition': 'random'}]}, {'returnType': 'void', 'methodName': 'main', 'params': [{'paramType': 'String[]', 'paramName': 'args'}], 'callMethods': ['172 12 out.println("Hello World!")', '175 20 doSomething()', '178 12 doSomething()', '180 12 doSomethingElse()', '184 12 doSomething()', '186 12 doSomethingElse()', '188 12 doSomethingDifferent()', '198 16 doSomething()', '202 16 doSomethingElse()', '205 16 doSomethingDifferent()', '211 12 doSomething()', '215 12 doSomething()', '219 12 doSomething()', '224 12 doSomething()', '228 12 doSomething()', '232 12 doSomething(i)', '238 12 someMethod()', '258 20 getChar()', '264 12 doSomething()', '269 34 str.toCharArray()', '276 16 doSomething(ch)', '285 8 readFromStream()', '294 12 methodThrowingExceptions()', '297 12 reportException(ex)', '300 12 freeResources()', '304 12 methodThrowingExceptions()', '307 12 reportException(ex)', '314 17 xEnc.writeObject(object)', '316 19 Logger.getLogger(Serializer.class.getName())', '316 46 Serializer.class.getName()', '316 57 Logger.getLogger(Serializer.class.getName()).log(Level.SEVERE,null,ex)', '325 8 doSomethingWithObject(obj)', '366 8 foo()', '367 8 foo()', '368 10 foo()', '369 10 foo()'], 'methodBody': '{out.println("Hello World!");if(i==3)doSomething();if(i==2){doSomething();}else{doSomethingElse();}if(i==3){doSomething();}elseif(i==2){doSomethingElse();}else{doSomethingDifferent();}inta=1;intb=2;intminVal=(a<b)?a:b;switch(ch){case\'A\':doSomething();break;case\'B\':case\'C\':doSomethingElse();break;default:doSomethingDifferent();break;}while(i<10){doSomething();}do{doSomething();}while(i<10);for(inti=0;i<10;i++){doSomething();}for(inti=0,j=9;i<10;i++,j-=3){doSomething();}for(;;){doSomething();}for(inti:intArray){doSomething(i);}start:someMethod();for(inti=0;i<10;i++){while(true){break;}}outer:for(inti=0;i<10;i++){while(true){breakouter;}}intch;while(ch=getChar()){if(ch==\' \'){continue;}doSomething();}outer:for(Stringstr:stringsArr){char[]strChars=str.toCharArray();for(charch:strChars){if(ch==\' \'){continueouter;}doSomething(ch);}}if(streamClosed){return;}readFromStream();intresult=a+b;returnresult;try{methodThrowingExceptions();}catch(Exceptionex){reportException(ex);}finally{freeResources();}try{methodThrowingExceptions();}catch(IOException|IllegalArgumentExceptionex){reportException(ex);}try(FileOutputStreamfos=newFileOutputStream("filename");XMLEncoderxEnc=newXMLEncoder(fos)){xEnc.writeObject(object);}catch(IOExceptionex){Logger.getLogger(Serializer.class.getName()).log(Level.SEVERE,null,ex);}if(obj==null){thrownewNullPointerException();}doSomethingWithObject(obj);synchronized(someObject){}assertn!=0;assertn!=0:"n was equal to zero";int[]numbers=newint[5];numbers[0]=2;intx=numbers[0];int[]numbers=newint[]{20,1,42,15,34};int[]numbers2={20,1,42,15,34};int[][]numbers=newint[3][3];numbers[1][2]=2;int[][]numbers2={{2,3,2},{1,2,6},{2,4,5}};int[][]numbers=newint[2][];numbers[0]=newint[3];numbers[1]=newint[2];numbers[0][0]++;numbers[0][0]--;++numbers[0][0];--numbers[0][0];foo()[0]++;foo()[0]--;++foo()[0];--foo()[0];}', 'methodvars': [{'varType': 'int', 'varDefinition': 'a'}, {'varType': 'int', 'varDefinition': 'b'}, {'varType': 'int', 'varDefinition': 'minVal'}, {'varType': 'int', 'varDefinition': 'i'}, {'varType': 'int', 'varDefinition': 'i'}, {'varType': 'int', 'varDefinition': 'i'}, {'varType': 'int', 'varDefinition': 'i'}, {'varType': 'int', 'varDefinition': 'ch'}, {'varType': 'char[]', 'varDefinition': 'strChars'}, {'varType': 'int', 'varDefinition': 'result'}, {'varType': 'int[]', 'varDefinition': 'numbers'}, {'varType': 'int', 'varDefinition': 'x'}, {'varType': 'int[]', 'varDefinition': 'numbers'}, {'varType': 'int[]', 'varDefinition': 'numbers2'}, {'varType': 'int[][]', 'varDefinition': 'numbers'}, {'varType': 'int[][]', 'varDefinition': 'numbers2'}, {'varType': 'int[][]', 'varDefinition': 'numbers'}]}, {'returnType': 'void', 'methodName': 'inner_class_constructor', 'params': [], 'callMethods': [], 'methodBody': '{Foofoo=newFoo();Foo.BarfooBar1=foo.newBar();Foo.BarfooBar2=newFoo().newBar();}', 'methodvars': [{'varType': 'Foo', 'varDefinition': 'foo'}, {'varType': 'Foo.Bar', 'varDefinition': 'fooBar1'}, {'varType': 'Foo.Bar', 'varDefinition': 'fooBar2'}]}, {'returnType': 'void', 'methodName': 'bar', 'params': [], 'callMethods': [], 'methodBody': '{@WeakOuterclassFoobar{}}', 'methodvars': []}, {'returnType': 'void', 'methodName': 'bar', 'params': [], 'callMethods': [], 'methodBody': '{newObject(){};}', 'methodvars': []}, {'returnType': 'int', 'methodName': 'go', 'params': [], 'callMethods': ['454 19 System.out.println(Foo.class.getName()+": constructor runtime")', '454 37 Foo.class.getName()', '457 19 System.out.println(Foo.class.getName()+": overloaded constructor "+this())', '457 37 Foo.class.getName()', '457 79 this()'], 'methodBody': '{return0;}', 'methodvars': []}, {'returnType': 'int', 'methodName': 'bar', 'params': [{'paramType': 'int', 'paramName': 'a'}, {'paramType': 'int', 'paramName': 'b'}], 'callMethods': [], 'methodBody': '{return(a*2)+b;}', 'methodvars': []}, {'returnType': 'int', 'methodName': 'bar', 'params': [{'paramType': 'int', 'paramName': 'a'}], 'callMethods': [], 'methodBody': '{returna*2;}', 'methodvars': []}, {'returnType': 'void', 'methodName': 'openStream', 'params': [], 'callMethods': [], 'methodBody': 'throws', 'methodvars': []}, {'returnType': 'void', 'methodName': 'printReport', 'params': [{'paramType': 'String', 'paramName': 'header'}, {'paramType': 'int', 'paramName': '...'}], 'callMethods': ['473 19 System.out.println(header)', '475 23 System.out.println(num)'], 'methodBody': '{System.out.println(header);for(intnum:numbers){System.out.println(num);}}', 'methodvars': []}, {'returnType': 'int', 'methodName': 'doSomething', 'params': [], 'callMethods': [], 'methodBody': '{return0;}', 'methodvars': []}, {'returnType': 'int', 'methodName': 'doSomething', 'params': [], 'callMethods': ['499 19 System.out.println(AbstractClass.class.getName()+": static block runtime")', '499 47 AbstractClass.class.getName()', '500 52 AbstractClass.class.getName()', '504 19 System.out.println(AbstractClass.class.getName()+": instance block runtime")', '504 47 AbstractClass.class.getName()', '508 19 System.out.println(AbstractClass.class.getName()+": constructor runtime")', '508 47 AbstractClass.class.getName()'], 'methodBody': '{return1;}', 'methodvars': []}, {'returnType': 'void', 'methodName': 'hello', 'params': [], 'callMethods': ['512 19 System.out.println(hello)', '519 19 System.out.println(CustomClass.class.getName()+": static block runtime")', '519 45 CustomClass.class.getName()', '523 19 System.out.println(CustomClass.class.getName()+": instance block runtime")', '523 45 CustomClass.class.getName()', '527 8 super()', '528 19 System.out.println(CustomClass.class.getName()+": constructor runtime")', '528 45 CustomClass.class.getName()'], 'methodBody': '{System.out.println(hello);}', 'methodvars': []}, {'returnType': 'void', 'methodName': 'main', 'params': [{'paramType': 'String[]', 'paramName': 'args'}], 'callMethods': ['533 8 hello()', '534 22 AbstractClass.hello()'], 'methodBody': '{CustomClassnc=newCustomClass();hello();AbstractClass.hello();}', 'methodvars': [{'varType': 'CustomClass', 'varDefinition': 'nc'}]}, {'returnType': 'String', 'methodName': 'getDescription', 'params': [], 'callMethods': [], 'methodBody': '{returndescription;}', 'methodvars': []}, {'returnType': 'String', 'methodName': 'getDescription', 'params': [], 'callMethods': [], 'methodBody': '{return"cold";}', 'methodvars': []}, {'returnType': 'String', 'methodName': 'getDescription', 'params': [], 'callMethods': [], 'methodBody': '{return"warmer";}', 'methodvars': []}, {'returnType': 'String', 'methodName': 'getDescription', 'params': [], 'callMethods': [], 'methodBody': '{return"hot";}', 'methodvars': []}, {'returnType': 'String', 'methodName': 'getDescription', 'params': [], 'callMethods': [], 'methodBody': '{return"cooler";}', 'methodvars': []}, {'returnType': 'void', 'methodName': 'actionSelected', 'params': [{'paramType': 'int', 'paramName': 'action'}], 'callMethods': [], 'methodBody': '{}', 'methodvars': []}, {'returnType': 'int', 'methodName': 'requestReceived', 'params': [], 'callMethods': [], 'methodBody': '{}', 'methodvars': []}, {'returnType': 'void', 'methodName': 'dummy', 'params': [], 'callMethods': ['597 17 listener.requestReceived()'], 'methodBody': '{RequestListenerlistener=newActionHandler();listener.requestReceived();}', 'methodvars': [{'varType': 'RequestListener', 'varDefinition': 'listener'}]}, {'returnType': 'void', 'methodName': 'dummy', 'params': [], 'callMethods': [], 'methodBody': '{interfaceAnotherInterfaceextendsRunnable{voidwork();}}', 'methodvars': []}, {'returnType': 'void', 'methodName': 'openOutputStream', 'params': [], 'callMethods': [], 'methodBody': '{}', 'methodvars': []}, {'returnType': 'void', 'methodName': 'travelToJupiter', 'params': [], 'callMethods': [], 'methodBody': '{}', 'methodvars': []}, {'returnType': 'void', 'methodName': 'add', 'params': [{'paramType': 'T', 'paramName': 'array'}, {'paramType': 'V', 'paramName': 'item'}], 'callMethods': ['637 14 array.add(item)'], 'methodBody': '{array.add(item);Mapper<CustomList,Integer>mapper=newMapper<CustomList,Integer>();Mapper<CustomList,?>mapper;mapper=newMapper<CustomList,Boolean>();mapper=newMapper<CustomList,Integer>();}', 'methodvars': [{'varType': 'Mapper<CustomList,Integer>', 'varDefinition': 'mapper'}, {'varType': 'Mapper<CustomList,?>', 'varDefinition': 'mapper'}]}, {'returnType': 'boolean', 'methodName': 'contains', 'params': [{'paramType': 'T', 'paramName': 'item'}, {'paramType': 'V[]', 'paramName': 'arr'}], 'callMethods': ['659 21 item.equals(currentItem)'], 'methodBody': '{for(TcurrentItem:arr){if(item.equals(currentItem)){returntrue;}}returnfalse;}', 'methodvars': []}, {'returnType': 'void', 'methodName': 'addItem', 'params': [{'paramType': 'T', 'paramName': 'item'}], 'callMethods': [], 'methodBody': '{}', 'methodvars': []}, {'returnType': 'void', 'methodName': 'addItem', 'params': [{'paramType': 'Integer', 'paramName': 'item'}], 'callMethods': [], 'methodBody': '{}', 'methodvars': []}, {'returnType': 'org.host.test.@NBar<T>', 'methodName': 'fn1', 'params': [{'paramType': 'org.host.test.@N', 'paramName': 'Bar<T>'}], 'callMethods': [], 'methodBody': '{returnnull;}', 'methodvars': []}, {'returnType': 'org.test.@NBar<T>', 'methodName': 'fn2', 'params': [{'paramType': 'org.test.@N', 'paramName': 'Bar<T>'}], 'callMethods': [], 'methodBody': '{returnnull;}', 'methodvars': []}, {'returnType': 'org.@NBar<T>', 'methodName': 'fn3', 'params': [{'paramType': 'org.@N', 'paramName': 'Bar<T>'}], 'callMethods': [], 'methodBody': '{returnnull;}', 'methodvars': []}, {'returnType': 'void', 'methodName': 'main', 'params': [{'paramType': 'String[]', 'paramName': 'args'}], 'callMethods': [], 'methodBody': '{if(argsinstanceofString[]){}if(argsinstanceofa.String[]){}}', 'methodvars': []}]}
